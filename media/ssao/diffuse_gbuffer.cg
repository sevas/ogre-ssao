struct AppData
{
    float4 position : POSITION;
    float3 normal : NORMAL;
};

struct VertexOut
{
    float4 position : POSITION;
    float3 position_in_view_space : TEXCOORD0;
    float3 normal_in_view_space   : TEXCOORD1;    
	float  depth_view_space : TEXCOORD2;
};


VertexOut geom_vs(
    AppData IN    
    ,uniform float4x4 worldViewProjMatrix
    ,uniform float4x4 worldViewMatrix)
{
    VertexOut OUT;

    OUT.position = mul(worldViewProjMatrix, IN.position);
    OUT.position_in_view_space = mul(worldViewMatrix, IN.position);
    OUT.normal_in_view_space = mul(worldViewMatrix, float4(IN.normal, 0));

	OUT.depth_view_space = OUT.position_in_view_space.z;

    return OUT;
}
//------------------------------------------------------------------------------
struct FragmentInput
{
    float3 position_in_view_space : TEXCOORD0;
    float3 normal_in_view_space   : TEXCOORD1;    
	float  depth_view_space : TEXCOORD2;
};

struct FragmentOut
{
    float4 color : COLOR0;
};


FragmentOut geom_ps(FragmentInput IN)
{
    FragmentOut OUT;

    
    float3 p = IN.position_in_view_space.xyz;
    float3 n = IN.normal_in_view_space.xyz;
    
    float depth = length(p);
    float3 normal = normalize(n.xyz);
    
    OUT.color = float4(IN.depth_view_space, normal);

    return OUT;
}
