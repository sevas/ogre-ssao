struct VIn
{
    float4 p   : POSITION;
    float3 n   : NORMAL;
    float2 uv  : TEXCOORD0;
};

struct VOut
{
    float4 p   : POSITION;
    float2 uv  : TEXCOORD0;
};

struct PIn
{
    float2 uv  : TEXCOORD0;
};



VOut ssao_debug_vs(VIn IN, uniform float4x4 wvp)
{
    VOut OUT;
    OUT.p = mul(wvp, IN.p);
    // clean up inaccuracies for the UV coords
    float2 uv = sign(IN.p);
    // convert to image space
    uv = (float2(uv.x, -uv.y) + 1.0) * 0.5;
    OUT.uv = uv;
    // calculate the correct ray (modify XY parameters based on screen-space quad XY)
    return OUT;
}



#define VSPLIT 0.3f
#define TOP_HSPLIT 0.3333f
#define BOTTOM_HSPLIT 0.5f


float4 ssao_debug_ps(
    PIn IN,
    uniform float4x4 ptMat,
    uniform sampler2D geomMap : TEXUNIT0
    ,uniform sampler2D  ssaoResult: TEXUNIT1
    ,uniform sampler2D diffuseOnly : TEXUNIT2
    ,uniform sampler2D finalScene : TEXUNIT3
    ): COLOR0
{

	float4 oColor = float4(0,0,0,0);
	float2 coords = IN.uv;

	if(coords.y < VSPLIT)
	{
		float2 scale = float2(1.0f/TOP_HSPLIT, 1.0/VSPLIT); 
		if(coords.x < TOP_HSPLIT)
		{
			float depth = tex2D(geomMap, scale * (coords - float2(0, VSPLIT))).x;	
			oColor = float4(depth, depth, depth, 1.0f); 
		}
		else if(coords.x < (2*TOP_HSPLIT))
		{
			float3 normal = tex2D(geomMap, scale * (coords - float2(TOP_HSPLIT, VSPLIT))).yzw;	
			oColor = float4(normal, 1.0f); 
		}
		else
		{
			oColor = tex2D(ssaoResult, scale * (coords - float2(2*TOP_HSPLIT, VSPLIT)));		
		}		
	}
	else
	{
		float2 scale = float2(1.0/BOTTOM_HSPLIT, 1.0/(1.0f-VSPLIT));

		if(coords.x < BOTTOM_HSPLIT)
		{	
			float2 offset = float2(0, VSPLIT); 
			oColor = tex2D(diffuseOnly, scale * (coords - offset));
		}	
		else
		{
			float2 offset = float2(BOTTOM_HSPLIT, VSPLIT);
			oColor = tex2D(finalScene, scale * (coords - offset));
		}
	}

//    return tex2D(ssaoResult, IN.uv);
	return oColor;
}
