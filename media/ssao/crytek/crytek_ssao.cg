struct AppData
{
    float4 p   : POSITION;
    float3 n   : NORMAL;
    float2 uv  : TEXCOORD0;
};

struct VertexOut
{
    float4 p             : POSITION;
    float2 pixelPos      : TEXCOORD0;
};

struct FragmentInput
{
    float2 pixelPos      : TEXCOORD0;
};

//------------------------------------------------------------------------------
VertexOut crytek_ssao_vs(AppData IN, uniform float4x4 wvp, uniform float3 farCorner)
{
    VertexOut OUT;
    OUT.p = mul(wvp, IN.p);

    // clean up inaccuracies for the UV coords
    float2 uv = sign(IN.p.xy);
    // convert to image space
    uv = (float2(uv.x, -uv.y) + 1.0) * 0.5;
    OUT.pixelPos = uv;
    
	return OUT;
}



#define PI 3.141592653


void crytek_ssao_ps(FragmentInput IN
    ,uniform float far
    ,uniform sampler2D geomMap : TEXUNIT0
	,uniform sampler2D randMap : TEXUNIT1
	,uniform float4 viewportSize
    ,uniform float nearDistance
	,uniform float farDistance
	,uniform float sampleInScreenSpace
	,uniform float sampleLengthScreenSpace
    ,out float4 oColor)
{

    float4 sample = tex2D(geomMap, IN.pixelPos);
    float z = sample.r;
    
    float3 P = float3(IN.pixelPos, z);
    
    float2 samples[8] = {
        float2(1.0, 0.0),
        float2(0.707106, 0.707106),
        float2(0, 1.0),
        float2(-0.707106, 0.707106),
        float2(-1.0, 0),
        float2(-0.707106, -0.707106),
        float2(0, -1.0),
        float2(0.707106, -0.707106)        
    };
    

    int count = 0;	
	float ao = 0.0f;
   
	const int num_samples =8;       

    for (int i=0 ; i<num_samples ; i++)
    {
        float x, y;
         
        float2 coords = samples[i];
        
        float2 neighbour_coords = IN.pixelPos + coords*0.003;
        float sampled_depth = tex2D(geomMap,  neighbour_coords).r;
        float3 Q = float3(neighbour_coords, sampled_depth);
         
        float len = length(P-Q);
        
        if(sampled_depth < z)
        {
            count += 1;
			ao += 1.0 / (1.0 + (len*len));
			//ao += len;	
        }
    }

	ao /= (num_samples);

	ao = 1.0-ao;	

	//if(count >=4)
		//oColor = float4(0, 0, 0, 1);
	//else
		//oColor = float4(ao, ao, ao, 1);
//
	oColor = float4(ao, ao, ao, 1);	

}
